"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –±–æ—Ç–∞."""

import datetime
import shlex
import time
import urllib3
import requests
import os
import logging
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv

import pytz
import telebot

from db_module import (user_create, user_exist,
                       user_get_action, user_set_action,
                       project_create, user_get_status,
                       user_set_status, check_date,
                       get_status_my_proj, review_add,
                       order_add, get_orders, get_reviews,
                       delete_order, delete_review,
                       get_project_by_name, edit_project,
                       delete_project, user_get_select,
                       user_set_select, update_last_interaction,
                       get_projects_billing, give_coupon,
                       get_user_coupone, get_all_cupone,
                       delete_coupon, get_user_by_username,
                       user_set_status_by_username, auto_give_cupone,
                       settings_get, settings_update,
                       get_users_id,
                       )

from buttons import (get_project_menu, buttons_name,
                     main_menu_admin, main_menu_user,
                     cancel_menu, order_menu,
                     admin_menu, cancel_menu_admin,
                     project_edit, cancel_edit_proj,
                     delete_confirm_menu, status_select_menu,
                     price_menu, user_project_menu,
                     menu_coupon, order_menu,
                     review_menu, menu_users_admin,
                     settings_menu)

from validators import date_validator, coupone_add_validator

from messages import messages_dict, price_list

from utils import read_text_file, write_text_file

load_dotenv()

TOKEN = os.getenv('TOKEN')
NASTYA_ID = os.getenv('NASTYA_ID')
ALEX = os.getenv('ALEX_ID')
DEBUG_ADMIN = 'root'

default_timezone = pytz.timezone('Europe/Kaliningrad')
datetime.datetime.now(default_timezone)

bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')
# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = RotatingFileHandler("app.log", maxBytes=10*1024*1024,
                                   backupCount=5, encoding='utf-8')
"""
maxBytes- –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö), –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ä–æ—Ç–∞—Ü–∏—è
backupCount- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏
"""
file_handler.setFormatter(formatter)
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)


def get_current_datetime():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤—Ä–µ–º—è."""
    return datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")


def check_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É."""
    if user_get_status(user_id) == 'admin':
        return True
    return False


def time_to_minutes(time_str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    start_time = time_str.split('-')[0]
    hours, minutes = map(int, start_time.split(':'))
    return hours * 60 + minutes


def send_all():
    logging.info('[–†–∞—Å—Å—ã–ª–∫–∞]: –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    users_id = get_users_id()
    for index, id in enumerate(users_id):
        chat_id = id[0]
        bot.send_message(chat_id, '–¢–µ—Å—Ç')
        logging.info(f'[–†–∞—Å—Å—ã–ª–∫–∞]: {index}-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
        if index % 5 == 0:
            logging.info('[–†–∞—Å—Å—ã–ª–∫–∞]: –ü–∞—É–∑–∞')
            time.sleep(1)
    logging.info('[–†–∞—Å—Å—ã–ª–∫–∞]: –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

# send_all()
@bot.message_handler(commands=['start'])
def user_register(message):
    """–î–æ–±–∞–≤–ª—è–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥."""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date_joined = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    last_interaction = date_joined
    user_data = (user_id, username, first_name,
                 last_name, date_joined, last_interaction)
    if not user_exist(user_id):
        user_create(user_data)
    bot.send_message(message.chat.id, messages_dict['start'],
                     reply_markup=main_menu_user)


@bot.message_handler(content_types=['text'])
def message_handler(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞."""
    text = message.text
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username
    last_interaction = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    update_last_interaction(user_id, last_interaction)
    action = user_get_action(user_id)
    logging.info(f'{username}: {text}')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω—É–∂–Ω–æ–≥–æ –º–µ–Ω—é
    if check_admin(user_id):
        main_menu = main_menu_admin
    else:
        main_menu = main_menu_user

    if text == DEBUG_ADMIN:
        if check_admin(user_id):
            user_set_status(user_id, 'user')
            bot.send_message(chat_id, '–° –≤–∞—Å —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞',
                             reply_markup=main_menu_user)
        else:
            user_set_status(user_id, 'admin')
            bot.send_message(chat_id, '–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º',
                             reply_markup=main_menu_admin)
        return

    # –ö–æ–º–∞–Ω–¥–∞ –ü—Ä–∞–π—Å
    if text == buttons_name['price']:
        bot.send_message(chat_id, messages_dict['price'],
                         reply_markup=price_menu)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å —Å –∫–Ω–æ–ø–∫–∏
    elif text in price_list and action == 'menu':
        price = read_text_file(price_list[text])
        bot.send_message(chat_id, price)

    # –ö–æ–º–∞–Ω–¥–∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã
    elif text == buttons_name['works']:
        bot.send_message(chat_id, messages_dict['works'],
                         reply_markup=main_menu)

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –¥–∞—Ç–∞
    elif text == buttons_name['check_date']:
        bot.send_message(chat_id, messages_dict['check_date'],
                         reply_markup=cancel_menu)
        user_set_action(user_id, 'check_date')

    elif text == buttons_name['user_project']:
        bot.send_message(chat_id, '–ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤',
                         reply_markup=user_project_menu)

    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif text == buttons_name['stage']:
        projects = get_status_my_proj(username)
        statuses = ''
        if projects:
            for project in projects:
                statuses += f'–ü—Ä–æ–µ–∫—Ç: {project[0]}\nC—Ç–∞—Ç—É—Å: {project[1]}\n\n'
            msg = f'{messages_dict["stage_if"]}\n\n{statuses}'
            bot.send_message(chat_id, msg, reply_markup=main_menu)
        else:
            bot.send_message(chat_id, messages_dict['stage_else'],
                             reply_markup=main_menu)

    elif text == buttons_name['coupone']:
        coupons = get_user_coupone(username)
        if coupons:
            msg = '\n\n'.join([f'–ö—É–ø–æ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {coupon[1]}\n–ù–∞ {coupon[2]}' for coupon in coupons])
        else:
            msg = '–ö—É–ø–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
        bot.send_message(chat_id, msg)

    elif text == buttons_name['order']:
        bot.send_message(chat_id, messages_dict['order'],
                         reply_markup=order_menu)
        user_set_action(user_id, 'send_order')

    elif text == buttons_name['review']:
        bot.send_message(chat_id, messages_dict['review'],
                         reply_markup=cancel_menu)
        user_set_action(user_id, 'send_review')

    # –ö–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª. –º–µ–Ω—é
    elif text == buttons_name['cancel']:
        bot.send_message(chat_id, messages_dict['cancel'],
                         reply_markup=main_menu)
        user_set_action(user_id, 'menu')

    # –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
    elif text == buttons_name['admin']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, messages_dict['admin'],
                         reply_markup=admin_menu)

    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
    elif text == buttons_name['add_proj']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, messages_dict['add_proj'],
                         reply_markup=cancel_menu_admin)
        user_set_action(user_id, 'admin_add_project')

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    elif text == buttons_name['get_orders']:
        if not check_admin(user_id):
            return
        orders = get_orders()
        order_list = ''
        for order in orders:
            order_list += f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{order[0]}\n–¢–µ–∫—Å—Ç: {order[1]}\n\n'
        if not orders:
            order_list = messages_dict['empty']
        msg = f'{messages_dict["orders_head"]}\n\n{order_list}'
        bot.send_message(chat_id, msg, reply_markup=order_menu)

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
    elif text == buttons_name['get_reviews']:
        if not check_admin(user_id):
            return
        reviews = get_reviews()
        rev_list = ''
        for review in reviews:
            rev_list += f'@{review[0]}\nüíå: {review[1]}\n\n'
        if not reviews:
            rev_list = messages_dict['empty']
        msg = f'{messages_dict["reviews_head"]}\n\n{rev_list}'
        bot.send_message(chat_id, msg, reply_markup=review_menu)
     
    elif text == buttons_name['get_projects_billing']:
        if not check_admin(user_id):
            return
        billing = get_projects_billing()
        msg = f'–í—ã—Ä—É—á–∫–∞: {billing}'
        bot.send_message(chat_id, msg)

    elif text == buttons_name['edit_price']:
        if not check_admin(user_id):
            return
        msg = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–∞–π—Å'
        bot.send_message(chat_id, msg, reply_markup=price_menu)
        user_set_action(user_id, 'select_edit_price')

    elif text == buttons_name['menu_coupon']:
        if not check_admin(user_id):
            return
        coupons = get_all_cupone()
        if coupons:
            msg = '\n\n'.join(
                [f'–ö–£–ü–û–ù ‚Ññ{coupon[0]}\n–ö–æ–º–∞–Ω–¥–∞: {coupon[1]}\n–ù–∞ {coupon[2]}' for coupon in coupons]
                )
        else:
            msg = '–ö—É–ø–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
        bot.send_message(chat_id, msg, reply_markup=menu_coupon)

    elif text == buttons_name['give_coupon']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, messages_dict['give_coupon'],
                         reply_markup=cancel_menu_admin)
        user_set_action(user_id, 'give_coupon')

    elif text == buttons_name['delete_coupon']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, messages_dict['delete_coupon'],
                         reply_markup=cancel_menu_admin)
        user_set_action(user_id, 'delete_coupon')

    elif text == buttons_name['cancel_admin']:
        if not check_admin(user_id):
            return
        user_set_action(user_id, 'menu')
        bot.send_message(chat_id, messages_dict['cancel_admin'],
                         reply_markup=admin_menu)

    elif text == buttons_name['delete_order']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, messages_dict['delete_order'],
                         reply_markup=cancel_menu_admin)
        user_set_action(user_id, 'delete_order')

    elif text == buttons_name['delete_review']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, messages_dict['delete_review'],
                         reply_markup=cancel_menu_admin)
        user_set_action(user_id, 'delete_review')

    elif text == buttons_name['projects_menu']:
        if not check_admin(user_id):
            return
        projects_menu = get_project_menu()
        bot.send_message(chat_id, '–ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤',
                         reply_markup=projects_menu)
        user_set_action(user_id, 'project_edit')

    elif text == buttons_name['admin_users_menu']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                         reply_markup=menu_users_admin)
    
    elif text == buttons_name['admin_user_info']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                         reply_markup=menu_users_admin)
        user_set_action(user_id, 'admin_user_info')

    elif text == buttons_name['ban_user']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '[–ë–ê–ù‚ö†Ô∏è]: –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                         reply_markup=menu_users_admin)
        user_set_action(user_id, 'ban_user')

    elif text == buttons_name['unban_user']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '[–†–∞–∑–±–∞–Ω]: –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                         reply_markup=menu_users_admin)
        user_set_action(user_id, 'unban_user')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    elif text == buttons_name['edit_proj_name']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                         reply_markup=cancel_edit_proj)
        user_set_action(user_id, 'edit_proj_name')

    elif text == buttons_name['edit_proj_price']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É',
                         reply_markup=cancel_edit_proj)
        user_set_action(user_id, 'edit_proj_price')

    elif text == buttons_name['edit_proj_customer']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞',
                         reply_markup=cancel_edit_proj)
        user_set_action(user_id, 'edit_proj_customer')

    elif text == buttons_name['edit_proj_status']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å',
                         reply_markup=status_select_menu)
        user_set_action(user_id, 'edit_proj_status')

    elif text == buttons_name['edit_proj_date']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É',
                         reply_markup=cancel_edit_proj)
        user_set_action(user_id, 'edit_proj_date')

    elif text == buttons_name['edit_proj_time']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è',
                         reply_markup=cancel_edit_proj)
        user_set_action(user_id, 'edit_proj_time')

    elif text == buttons_name['delete_proj']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ',
                         reply_markup=delete_confirm_menu)
        user_set_action(user_id, 'delete_proj')

    elif text == buttons_name['cancel_edit_proj']:
        if not check_admin(user_id):
            return
        proj_menu = get_project_menu()
        bot.send_message(chat_id, '–û—Ç–º–µ–Ω–µ–Ω–æ',
                         reply_markup=proj_menu)
        user_set_action(user_id, 'project_edit')

    elif text == buttons_name['confirm_delete_proj']:
        if not check_admin(user_id):
            return
        delete_project(user_get_select(user_id))
        proj_menu = get_project_menu()
        bot.send_message(chat_id, '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
                         reply_markup=proj_menu)
        user_set_action(user_id, 'project_edit')

    elif text == buttons_name['settings']:
        if not check_admin(user_id):
            return
        bot.send_message(chat_id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                         reply_markup=settings_menu)
        
    elif text == buttons_name['autocoupon_periodicity']:
        if not check_admin(user_id):
            return
        interval = settings_get('autocoupon_periodicity')
        msg = f"""–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–∫—É–ø–æ–Ω–∞, –∫–∞–∂–¥—ã–π {interval[0]}-–π –ø—Ä–æ–µ–∫—Ç
–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        bot.send_message(chat_id, msg, reply_markup=settings_menu)
        user_set_action(user_id, 'autocoupon_periodicity')
       
    elif text == buttons_name['autocoupon_value']:
        if not check_admin(user_id):
            return
        value = settings_get('autocoupon_value')
        msg = f"""–°–∫–∏–¥–∫–∞ –∞–≤—Ç–æ–∫—É–ø–æ–Ω–∞: {value[0]}
–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        bot.send_message(chat_id, msg, reply_markup=settings_menu)
        user_set_action(user_id, 'autocoupon_value')


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ –∫–Ω–æ–ø–æ–∫
    else:
        proj_select = user_get_select(user_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        if action == 'admin_add_project':
            if not check_admin(user_id):
                return
            try:
                parts = shlex.split(text)
                project_name = parts[0].strip("'")
                team = parts[1].strip("'") if len(parts) > 1 else None
                customer = parts[2] if len(parts) > 2 else None
                price = int(parts[3]) if len(parts) > 3 else None
                date = parts[4] if len(parts) > 4 else None
                time_range = parts[5] if len(parts) > 5 else None

                valid_date = date_validator(date)
                if valid_date:
                    data = (
                            project_name,
                            price,
                            customer.replace('@', '') if customer is not None else None,
                            valid_date,
                            time_range,
                            team,
                        )
                    project_create(data)
                    user_set_action(user_id, 'menu')
                    bot.send_message(chat_id, messages_dict['proj_added'],
                                     reply_markup=admin_menu)
                    if auto_give_cupone(team):
                        msg = f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—ã–ª –≤—ã–¥–∞–Ω –∫—É–ø–æ–Ω –∫–æ–º–∞–Ω–¥–µ -  {team}'
                        bot.send_message(chat_id, msg)
                else:
                    bot.send_message(chat_id, messages_dict['check_date_error'])
            except IndexError:
                err_msg = "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
                bot.send_message(chat_id, err_msg)
                logging.info(f'{user_id}: {err_msg}')
            except ValueError:
                bot.send_message(chat_id, messages_dict['proj_error'])
                logging.info(f"{user_id}: {messages_dict['proj_error']}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
        elif action == 'check_date':
            if date_validator(text):
                dates = check_date(text)
                if dates:
                    sorted_times = sorted([time[0] for time in dates],
                                          key=time_to_minutes)
                    times = '\n'.join(sorted_times)
                    msg = f'{messages_dict["check_date_times"]}\n{times}'
                    bot.send_message(chat_id, msg, reply_markup=main_menu)
                else:
                    bot.send_message(chat_id, messages_dict['check_date_free'],
                                     reply_markup=main_menu)
                user_set_action(user_id, 'menu')
            else:
                msg = messages_dict['check_date_error']
                bot.send_message(chat_id, msg)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
        elif action == 'send_order':
            msg_user = messages_dict['send_order']
            if text == buttons_name['send_order']:
                msg_nastya = f'{messages_dict["give_order"]} @{username}'
            else:
                msg_nastya = f'{messages_dict["give_order"]} @{username}\n\n{text}'
            bot.send_message(NASTYA_ID, msg_nastya)
            bot.send_message(chat_id, msg_user, reply_markup=main_menu)
            order_add((username, get_current_datetime(), text))
            user_set_action(user_id, 'menu')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
        elif action == 'send_review':
            msg_user = messages_dict['send_review']
            msg_nastya = f'{messages_dict["give_review"]}\n\n{text}'
            send_date = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            data = (username, send_date, text)
            bot.send_message(chat_id, msg_user, reply_markup=main_menu)
            bot.send_message(NASTYA_ID, msg_nastya)
            review_add(data)
            user_set_action(user_id, 'menu')

        elif action == 'delete_order':
            if not check_admin(user_id):
                return
            customer = text.replace('@', '')
            if delete_order(customer):
                msg = f'–ó–∞—è–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {text} —É–¥–∞–ª–µ–Ω—ã'
                bot.send_message(chat_id, msg, reply_markup=admin_menu)
            else:
                msg = '[–û—à–∏–±–∫–∞]: –ó–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                bot.send_message(chat_id, msg)

        elif action == 'delete_review':
            if not check_admin(user_id):
                return
            customer = text.replace('@', '')
            if delete_review(customer):
                msg = f'–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {text} —É–¥–∞–ª–µ–Ω—ã'
                bot.send_message(chat_id, msg, reply_markup=admin_menu)
            else:
                msg = '[–û—à–∏–±–∫–∞]: –û—Ç–∑—ã–≤–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                bot.send_message(chat_id, msg)

        elif action == 'project_edit':
            if not check_admin(user_id):
                return
            project = get_project_by_name(text)
            if project:
                id = project[0]
                name = project[1]
                price = project[2]
                customer = project[3]
                status = project[4]
                date = project[5]
                time = project[6]
                team = project[7]
                msg = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ ID {id}
–ù–∞–∑–≤–∞–Ω–∏–µ: {name}
–°—Ç–∞—Ç—É—Å: {status}
–ó–∞–∫–∞–∑—á–∏–∫: {customer}
–ö–æ–º–∞–Ω–¥–∞: {team}
–î–∞—Ç–∞: {date} {time}
–¶–µ–Ω–∞: {price}
"""
                user_set_select(user_id, int(id))
                bot.send_message(chat_id, msg, reply_markup=project_edit)
            else:
                msg = '–ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω'
                bot.send_message(chat_id, msg)

        # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        elif action == 'edit_proj_name':
            if not check_admin(user_id):
                return
            try:
                edit_project('name', proj_select, text)
                msg = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ωüëåüèª'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
                user_set_action(user_id, 'project_edit')
            except Exception as e:
                msg = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∑–æ–≤–µ–º –∞–ª–µ–∫—Å–∞ üíÄ\n{e}'
                bot.send_message(chat_id, msg, reply_markup=project_edit)

        elif action == 'edit_proj_status':
            if not check_admin(user_id):
                return
            try:
                edit_project('status', proj_select, text)
                msg = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ωüëåüèª'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
                user_set_action(user_id, 'project_edit')
            except Exception as e:
                msg = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∑–æ–≤–µ–º –∞–ª–µ–∫—Å–∞ üíÄ\n{e}'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
        
        elif action == 'edit_proj_price':
            if not check_admin(user_id):
                return
            try:
                edit_project('price', proj_select, text)
                msg = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ωüëåüèª'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
                user_set_action(user_id, 'project_edit')
            except Exception as e:
                msg = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∑–æ–≤–µ–º –∞–ª–µ–∫—Å–∞ üíÄ\n{e}'
                bot.send_message(chat_id, msg, reply_markup=project_edit)

        elif action == 'edit_proj_customer':
            if not check_admin(user_id):
                return
            try:
                edit_project('customer', proj_select, text)
                msg = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ωüëåüèª'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
                user_set_action(user_id, 'project_edit')
            except Exception as e:
                msg = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∑–æ–≤–µ–º –∞–ª–µ–∫—Å–∞ üíÄ\n{e}'
                bot.send_message(chat_id, msg, reply_markup=project_edit)

        elif action == 'edit_proj_date':
            if not check_admin(user_id):
                return
            try:
                edit_project('date', proj_select, text)
                msg = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ωüëåüèª'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
                user_set_action(user_id, 'project_edit')
            except Exception as e:
                msg = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∑–æ–≤–µ–º –∞–ª–µ–∫—Å–∞ üíÄ\n{e}'
                bot.send_message(chat_id, msg, reply_markup=project_edit)

        elif action == 'edit_proj_time':
            if not check_admin(user_id):
                return
            try:
                edit_project('time', proj_select, text)
                msg = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ωüëåüèª'
                bot.send_message(chat_id, msg, reply_markup=project_edit)
                user_set_action(user_id, 'project_edit')
            except Exception as e:
                msg = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∑–æ–≤–µ–º –∞–ª–µ–∫—Å–∞ üíÄ\n{e}'
                bot.send_message(chat_id, msg, reply_markup=project_edit)

        elif action == 'edit_price':
            if not check_admin(user_id):
                return
            select = user_get_select(user_id)
            file_path = price_list[select]
            write_text_file(file_path, text)
            bot.send_message(chat_id, '–ò–∑–º–µ–Ω–µ–Ω–æ)', reply_markup=admin_menu)
            user_set_action(user_id, 'menu')

        elif action == 'select_edit_price':
            if not check_admin(user_id):
                return
            if text in price_list:
                user_set_select(user_id, text)
                user_set_action(user_id, 'edit_price')
                msg = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å'
                bot.send_message(chat_id, msg, reply_markup=cancel_menu_admin)
            else:
                msg = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–∞–π—Å–∞!'
                bot.send_message(chat_id, msg, reply_markup=project_edit)

        elif action == 'give_coupon':
            if not check_admin(user_id):
                return
            try:
                coupone_add_validator(text)
                parts = shlex.split(text)
                team = parts[0].strip("'")
                value = parts[1]if len(parts) > 1 else None
                data = (team, value)
                give_coupon(data)
                msg = f'–ö—É–ø–æ–Ω –Ω–∞ {value} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∫–æ–º–∞–Ω–¥–µ {team}'
                bot.send_message(chat_id, msg, reply_markup=menu_coupon)
                user_set_action(user_id, 'menu')

            except ValueError:
                bot.send_message(chat_id, messages_dict['proj_error'],)
                logging.info(f"{user_id}: {err_msg}")

        elif action == 'delete_coupon':
            if not check_admin(user_id):
                return
            if text.isdigit():
                id = int(text)
                if delete_coupon(id):
                    user_set_action(user_id, 'menu')
                    bot.send_message(chat_id, f'–ö—É–ø–æ–Ω ‚Ññ{id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
                                     reply_markup=menu_coupon)
                else:
                    bot.send_message(chat_id, '–ö—É–ø–æ–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä –Ω–µ—Çü•¥')
            else:
                err_msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞.'
                bot.send_message(chat_id, err_msg)

        elif action == 'admin_user_info':
            if not check_admin(user_id):
                return
            username = text.replace('@', '')
            user = get_user_by_username(username)
            if user:
                get_user_id = user[1]
                username = f'@{username}'
                firts_name = user[3] if user[3] else ''
                last_name = user[4] if user[4] else ''
                date_join = user[5]
                last_interaction = user[6]
                status = user[7]
                msg = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username}üë§
–ò–º—è: {firts_name} {last_name}
–°—Ç–∞—Ç—É—Å: {status}
–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_interaction}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_join}
ID: {get_user_id}
"""
                bot.send_message(chat_id, msg)
                user_set_action(user_id, 'menu')
            else:
                msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                bot.send_message(chat_id, msg)
        
        elif action == 'ban_user':
            if not check_admin(user_id):
                return
            username = text.replace('@', '')
            if user_set_status_by_username(username, 'banned'):
                msg = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω'
                bot.send_message(chat_id, msg)
                user_set_action(user_id, 'menu')
            else:
                msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                bot.send_message(chat_id, msg)
        
        elif action == 'unban_user':
            if not check_admin(user_id):
                return
            username = text.replace('@', '')
            if user_set_status_by_username(username, 'user'):
                msg = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω'
                bot.send_message(chat_id, msg)
                user_set_action(user_id, 'menu')
            else:
                msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                bot.send_message(chat_id, msg)

        elif action == 'autocoupon_periodicity':
            if not check_admin(user_id):
                return
            if text.isdigit():
                settings_update('autocoupon_periodicity', text)
                user_set_action(user_id, 'menu')
                msg = f'–û–±–Ω–æ–≤–ª–µ–Ω–æ! –ö—É–ø–æ–Ω –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π {text}-–π –ø—Ä–æ–µ–∫—Ç'
                bot.send_message(chat_id, msg)
            else:
                bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')

        elif action == 'autocoupon_value':
            if not check_admin(user_id):
                return
            settings_update('autocoupon_value', text)
            user_set_action(user_id, 'menu')
            msg = f'–û–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ - {text}'
            bot.send_message(chat_id, msg)


try:
    bot.polling(none_stop=True, interval=0, timeout=20)
except (urllib3.exceptions.ConnectionError,
        urllib3.exceptions.MaxRetryError,
        urllib3.exceptions.ConnectTimeoutError) as e:
    err_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:"
    logging.error(err_msg, e)
    time.sleep(3)
except requests.exceptions.ReadTimeout as e:
    err_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:"
    logging.error(err_msg, e)
    time.sleep(3)
except requests.exceptions.ConnectionError as e:
    err_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"
    logging.error(err_msg, e)
    time.sleep(3)
except urllib3.exceptions.HTTPError as e:
    err_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ HTTP:"
    logging.error(err_msg, e)
    time.sleep(3)

"""except Exception as e:
    print(f"Error: {e}")
    time.sleep(15)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π"""
